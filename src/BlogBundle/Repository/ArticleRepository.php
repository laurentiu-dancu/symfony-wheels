<?php

namespace BlogBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * ArticleRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ArticleRepository extends EntityRepository
{
    public function getPaginated($pageNr, $limit, $categoryId = null, $langcode = null)
    {
        $firstResult = ($pageNr - 1) * $limit;
        $qb = $this->createQueryBuilder('a');
        $qb->orWhere('a.deleted <> 1')->orWhere('a.deleted IS NULL');
        if ($categoryId) {
            $qb = $qb->andWhere('a.category = :categoryId')
                ->setParameter('categoryId', $categoryId);
        }
        if ($langcode) {
            $qb = $qb->andWhere('a.langcode = :langcode')
                ->setParameter('langcode', $langcode);
        }
        $qb->setFirstResult($firstResult)
            ->setMaxResults($limit);

        return $qb->getQuery()->getResult();
    }

    /**
     * @param null $categoryId
     * @return int
     */
    public function countArticles($categoryId = null)
    {
        $qb= $this->createQueryBuilder('a')
            ->select('COUNT(a)');

        $qb->orWhere('a.deleted <> 1')->orWhere('a.deleted IS NULL');
        if ($categoryId) {
            $qb = $qb->andWhere('a.category = :categoryId')
                ->setParameter('categoryId', $categoryId);
        }

        return $qb->getQuery()->getSingleScalarResult();
    }

    public function getArticlesToDispatch() {
        $query = $this
            ->createQueryBuilder('a')
            ->orWhere('a.dispatched <> 1')
            ->orWhere('a.dispatched IS NULL');

        return $query->getQuery()->getResult();
    }
}
